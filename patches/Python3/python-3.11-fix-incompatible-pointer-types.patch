diff --git a/Modules/_multiprocessing/semaphore.c b/Modules/_multiprocessing/semaphore.c
index 49174d39f1..a478809396 100644
--- a/Modules/_multiprocessing/semaphore.c
+++ b/Modules/_multiprocessing/semaphore.c
@@ -616,14 +616,14 @@ _multiprocessing_SemLock__get_value_impl(SemLockObject *self)
     PyErr_SetNone(PyExc_NotImplementedError);
     return NULL;
 #else
-    int sval;
+    long sval;
     if (SEM_GETVALUE(self->handle, &sval) < 0)
         return _PyMp_SetError(NULL, MP_STANDARD_ERROR);
     /* some posix implementations use negative numbers to indicate
        the number of waiting threads */
     if (sval < 0)
         sval = 0;
-    return PyLong_FromLong((long)sval);
+    return PyLong_FromLong(sval);
 #endif
 }
 
@@ -648,10 +648,10 @@ _multiprocessing_SemLock__is_zero_impl(SemLockObject *self)
         Py_RETURN_FALSE;
     }
 #else
-    int sval;
+    long sval;
     if (SEM_GETVALUE(self->handle, &sval) < 0)
         return _PyMp_SetError(NULL, MP_STANDARD_ERROR);
-    return PyBool_FromLong((long)sval == 0);
+    return PyBool_FromLong(sval == 0);
 #endif
 }
 
diff --git a/Modules/_winapi.c b/Modules/_winapi.c
index 0cf9eb9ec6..122dd983a2 100644
--- a/Modules/_winapi.c
+++ b/Modules/_winapi.c
@@ -550,7 +550,7 @@ _winapi_CreateJunction_impl(PyObject *module, LPCWSTR src_path,
         /* overallocate by a few array elements */
         LUID_AND_ATTRIBUTES privs[4];
     } tp, previousTp;
-    int previousTpSize = 0;
+    DWORD previousTpSize = 0;
 
     /* Reparse data buffer */
     const USHORT prefix_len = 4;
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 4a9c232704..1677bced12 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -4545,7 +4545,7 @@ os__path_splitroot_impl(PyObject *module, path_t *path)
 /*[clinic end generated code: output=ab7f1a88b654581c input=dc93b1d3984cffb6]*/
 {
     wchar_t *buffer;
-    wchar_t *end;
+    const wchar_t *end;
     PyObject *result = NULL;
     HRESULT ret;
 
@@ -5922,9 +5922,9 @@ os_execv_impl(PyObject *module, path_t *path, PyObject *argv)
 
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef HAVE_WEXECV
-    _wexecv(path->wide, argvlist);
+    _wexecv(path->wide, (const EXECV_CHAR *const *)argvlist);
 #else
-    execv(path->narrow, argvlist);
+    execv(path->narrow, (const EXECV_CHAR *const *)argvlist);
 #endif
     _Py_END_SUPPRESS_IPH
 
@@ -6003,9 +6003,9 @@ os_execve_impl(PyObject *module, path_t *path, PyObject *argv, PyObject *env)
     else
 #endif
 #ifdef HAVE_WEXECV
-        _wexecve(path->wide, argvlist, envlist);
+        _wexecve(path->wide, (const EXECV_CHAR *const *)argvlist, (const EXECV_CHAR *const *)envlist);
 #else
-        execve(path->narrow, argvlist, envlist);
+        execve(path->narrow, (const EXECV_CHAR *const *)argvlist, (const EXECV_CHAR *const *)envlist);
 #endif
     _Py_END_SUPPRESS_IPH
 
@@ -6622,11 +6622,11 @@ os_spawnv_impl(PyObject *module, int mode, path_t *path, PyObject *argv)
     Py_BEGIN_ALLOW_THREADS
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef HAVE_WSPAWNV
-    spawnval = _wspawnv(mode, path->wide, argvlist);
+    spawnval = _wspawnv(mode, path->wide, (const EXECV_CHAR *const *)argvlist);
 #elif defined(HAVE_RTPSPAWN)
     spawnval = _rtp_spawn(mode, path->narrow, (const char **)argvlist, NULL);
 #else
-    spawnval = _spawnv(mode, path->narrow, argvlist);
+    spawnval = _spawnv(mode, path->narrow, (const EXECV_CHAR *const *)argvlist);
 #endif
     _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
@@ -6738,12 +6738,12 @@ os_spawnve_impl(PyObject *module, int mode, path_t *path, PyObject *argv,
     Py_BEGIN_ALLOW_THREADS
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef HAVE_WSPAWNV
-    spawnval = _wspawnve(mode, path->wide, argvlist, envlist);
+    spawnval = _wspawnve(mode, path->wide, (const EXECV_CHAR *const *)argvlist, (const EXECV_CHAR *const *)envlist);
 #elif defined(HAVE_RTPSPAWN)
     spawnval = _rtp_spawn(mode, path->narrow, (const char **)argvlist,
                            (const char **)envlist);
 #else
-    spawnval = _spawnve(mode, path->narrow, argvlist, envlist);
+    spawnval = _spawnve(mode, path->narrow, (const EXECV_CHAR *const *)argvlist, (const EXECV_CHAR *const *)envlist);
 #endif
     _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
diff --git a/PC/launcher.c b/PC/launcher.c
index 09ac7d902c..7d8228e583 100644
--- a/PC/launcher.c
+++ b/PC/launcher.c
@@ -1912,7 +1912,7 @@ process(int argc, wchar_t ** argv)
     {
         FILE *f;
         char buffer[4096]; /* 4KB should be enough for anybody */
-        char *start;
+        const char *start;
         DWORD len, cch, cch_actual;
         size_t cb;
         if (_wfopen_s(&f, venv_cfg_path, L"r")) {
